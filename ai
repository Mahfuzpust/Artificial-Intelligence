--------BFS-------------

from collections import defaultdict

class Graph:

	def __init__(self):

		self.graph = defaultdict(list)

	def addEdge(self, u, v):
		self.graph[u].append(v)


	def BFS(self, s):

		visited = [False] * (max(self.graph) + 1)

		queue = []

		queue.append(s)
		visited[s] = True

		while queue:

			s = queue.pop(0)
			print(s, end=" ")

			for i in self.graph[s]:
				if visited[i] == False:
					queue.append(i)
					visited[i] = True



if __name__ == '__main__':

	g = Graph()
	g.addEdge(0, 1)
	g.addEdge(0, 2)
	g.addEdge(1, 2)
	g.addEdge(2, 0)
	g.addEdge(2, 3)
	g.addEdge(3, 3)

	print("Breadth First Traversal")
	g.BFS(2)
======================

import collections

def BFS(graph, root):
    visited, queue = set(), collections.deque([root])
    visited.add(root)
    
    while queue:
        vertext = queue.popleft()
        print(str(vertext) + " ", end="")
        
        for neighbour in graph[vertext]:
            if neighbour not in visited:
                visited.add(neighbour)
                queue.append(neighbour)
                
                

if __name__ == '__main__':
    graph = {
        0: [1,2],
        1: [2],
        2: [3],
        3: [1,2]
    }
    print("Traversal: ")
    BFS(graph, 0)
    
 -------DFS-------
 
 
from collections import defaultdict

# goal_node = 1

class Graph:

	def __init__(self):

		self.graph = defaultdict(list)

	def addEdge(self, u, v):
		self.graph[u].append(v)

	def DFSUtil(self, v, visited):

		visited.add(v)
		print(v, end=' ')
		# if v == goal_node:
		# 	exit(0)

		for neighbour in self.graph[v]:
			if neighbour not in visited:
				self.DFSUtil(neighbour, visited)


	def DFS(self, v):

		visited = set()

		self.DFSUtil(v, visited)


if __name__ == "__main__":
	g = Graph()
	g.addEdge(0, 1)
	g.addEdge(0, 2)
	g.addEdge(1, 2)
	g.addEdge(2, 0)
	g.addEdge(2, 3)
	g.addEdge(3, 3)

	print("Following is DFS from (starting from vertex 2)")

	g.DFS(2)
-------------------

# DFS algorithm in Python


# DFS algorithm
def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()
    visited.add(start)

    print(start)

    for next in graph[start] - visited:
        dfs(graph, next, visited)
    return visited


graph = {'0': set(['1', '2']),
         '1': set(['2']),
         '2': set(['0','3']),
         '3': set(['3'])}

dfs(graph, '2')

---------------------hill---------------import random 
import string 
def generate_random_solution(length=6): 
    return [random.choice(string.printable) for _ in range(length)] 

def evaluate(solution): 
    target = list("Mahfuz") 
    diff = 0
    for i in range(len(target)): 
        s = solution[i] 
        t = target[i] 
        diff += abs(ord(s) - ord(t)) 
    return diff 

def mutate_solution(solution): 
    index = random.randint(0, len(solution) - 1) 
    solution[index] = random.choice(string.printable) 

best = generate_random_solution()
best_score = evaluate(best) 


while True: 
    print('Best score so far', best_score, 'Solution', "".join(best)) 
    
    if best_score == 0: 
        break
    new_solution = list(best)
    mutate_solution(new_solution)
    
    score = evaluate(new_solution) 
    if evaluate(new_solution) < best_score: 
        best = new_solution 
        best_score = score
        
        
------------A*-------------

import heapq

class Node:
    def __init__(self, state, parent=None, cost=0, heuristic=0):
        self.state = state
        self.parent = parent
        self.cost = cost
        self.heuristic = heuristic
        self.total_cost = cost + heuristic

    def __lt__(self, other):
        return self.total_cost < other.total_cost

def astar_search(initial_state, goal_state, successors_fn, heuristic_fn):
    # Initialize start node
    start_node = Node(initial_state, None, 0, heuristic_fn(initial_state))

    # Initialize priority queue and visited set
    queue = []
    visited = set()

    # Add start node to the queue
    heapq.heappush(queue, start_node)

    while queue:
        # Get node with lowest total cost
        current_node = heapq.heappop(queue)

        # Check if goal state reached
        if current_node.state == goal_state:
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]

        # Add current node to visited set
        visited.add(current_node.state)

        # Generate successor nodes
        successors = successors_fn(current_node.state)

        for successor_state, action_cost in successors:
            # Calculate cost from start to successor
            successor_cost = current_node.cost + action_cost

            # Calculate heuristic for successor
            successor_heuristic = heuristic_fn(successor_state)

            # Calculate total cost for successor
            successor_total_cost = successor_cost + successor_heuristic

            # Create successor node
            successor_node = Node(successor_state, current_node, successor_cost, successor_heuristic)

            # Check if successor node is already visited
            if successor_state in visited:
                continue

            # Check if successor node is already in the queue
            for node in queue:
                if node.state == successor_state and node.total_cost <= successor_total_cost:
                    break
            else:
                # Add successor node to the queue
                heapq.heappush(queue, successor_node)

    # No path found
    return []

# Example usage
# Define the initial state, goal state, successors function, and heuristic function
initial_state = 'S'
goal_state = 'G'

successors = {
    'S': [('A', 1), ('G', 10)],
    'A': [('B', 1), ('C', 1)],
    'B': [('D', 5)],
    'C': [('G', 4), ('D', 3)],
    'D': [('G', 2)],
    'G': []
}

def successors_fn(state):
    return successors[state]

def heuristic_fn(state):
    # Heuristic function (Manhattan distance)
    heuristic_values = {'S': 5,'A': 3, 'B': 4, 'C': 2, 'D': 6,'G': 0}
    return heuristic_values[state]

# Run A* search algorithm
path = astar_search(initial_state, goal_state, successors_fn, heuristic_fn)

# Print the resulting path
if path:
    print("Path found:", path)
else:
    print("No path found.")


----------------tic tac--------------

import sys

PLAYER = 'X'
OPPONENT = 'O'

def print_board(board):

    for row in board:
        print(' | '.join(row))
        print('---------')

def evaluate(board):

    for row in range(3):
        if board[row][0] == board[row][1] == board[row][2]:
            if board[row][0] == PLAYER:
                return 10
            elif board[row][0] == OPPONENT:
                return -10


    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col]:
            if board[0][col] == PLAYER:
                return 10
            elif board[0][col] == OPPONENT:
                return -10

    # Checking diagonals for a win
    if board[0][0] == board[1][1] == board[2][2]:
        if board[0][0] == PLAYER:
            return 10
        elif board[0][0] == OPPONENT:
            return -10

    if board[0][2] == board[1][1] == board[2][0]:
        if board[0][2] == PLAYER:
            return 10
        elif board[0][2] == OPPONENT:
            return -10

    # No winner, it's a draw
    return 0

def is_moves_left(board):
    # Function to check if there are any empty cells left on the board
    for row in board:
        for cell in row:
            if cell == ' ':
                return True
    return False

def minmax(board, depth, is_maximizer):
    # Minimax algorithm implementation

    # Evaluate the current state of the board
    score = evaluate(board)

    # If the maximizer or minimizer has won, return the score
    if score == 10:
        return score - depth
    elif score == -10:
        return score + depth
    # If it's a draw, return 0
    elif not is_moves_left(board):
        return 0

    if is_maximizer:
        # Maximizing player's turn
        best_score = -sys.maxsize
        for row in range(3):
            for col in range(3):
                if board[row][col] == ' ':
                    board[row][col] = PLAYER
                    best_score = max(best_score, minmax(board, depth + 1, not is_maximizer))
                    board[row][col] = ' '
        return best_score
    else:
        # Minimizing opponent's turn
        best_score = sys.maxsize
        for row in range(3):
            for col in range(3):
                if board[row][col] == ' ':
                    board[row][col] = OPPONENT
                    best_score = min(best_score, minmax(board, depth + 1, not is_maximizer))
                    board[row][col] = ' '
        return best_score

def find_best_move(board):
    # Function to find the best move for the current player using the Minimax algorithm

    best_score = -sys.maxsize
    best_move = (-1, -1)

    for row in range(3):
        for col in range(3):
            if board[row][col] == ' ':
                board[row][col] = PLAYER
                score = minmax(board, 0, False)
                board[row][col] = ' '

                if score > best_score:
                    best_score = score
                    best_move = (row, col)

    return best_move

def play_game():
    # Function to start and play the Tic-Tac-Toe game

    board = [[' ' for _ in range(3)] for _ in range(3)]
    print("Welcome to Tic-Tac-Toe!")
    print("Player: X, Opponent: O")
    print_board(board)

    while is_moves_left(board):
        # Player's move
        row = int(input("Enter the row (0-2): "))
        col = int(input("Enter the column (0-2): "))

        if board[row][col] == ' ':
            board[row][col] = PLAYER
            print_board(board)
        else:
            print("Invalid move. Try again.")
            continue

        # Check if the player has won
        if evaluate(board) == 10:
            print("Congratulations! You win!")
            return

        if not is_moves_left(board):
            print("It's a draw!")
            return

        # Opponent's move
        print("Opponent is making a move...")
        move = find_best_move(board)
        board[move[0]][move[1]] = OPPONENT
        print_board(board)

        # Check if the opponent has won
        if evaluate(board) == -10:
            print("You lose!")
            return

    print("It's a draw!")

# Start the game
play_game()


--------------Regression---------------

import matplotlib.pyplot as plt
import numpy as np

x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])

plt.scatter(x, y)
plt.show() 

n = len(x)  # number of data points
learning_rate = 0.01
epochs = 10000
# Initialize the slope and intercept
slope = 0
intercept = 0

# Perform gradient descent
for i in range(epochs):
    # Calculate y_pred
    y_pred = slope * x + intercept

    # Calculate derivatives
    d_slope = (-2 / n) * sum(x * (y - y_pred))
    d_intercept = (-2 / n) * sum(y - y_pred)

    # Update the slope and intercept
    slope = slope - learning_rate * d_slope
    intercept = intercept - learning_rate * d_intercept

# Print the slope and intercept
print("slope:", slope, "intercept:", intercept)

# Calculate y_pred
y_pred = slope * x + intercept

# Plot the linear regression line
plt.scatter(x, y, color='b', label='Data Points')
plt.plot(x, y_pred, color='r', label='Linear Regression Line')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Linear Regression')
plt.legend()
plt.show()

